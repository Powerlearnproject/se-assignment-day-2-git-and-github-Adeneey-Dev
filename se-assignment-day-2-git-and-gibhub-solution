Answer to se-assignment day 2
1a Fundamental concept of version control
  -version control is a system that track changes to our code, document and other digital content over time.
1b Why github is popular version control tools
  -GitHub is a popular version control platform that uses git, a distributed version control system
1c Version control helps maintain project by
  -preventing code loss, reducing conflicts, improving accountability and maintaining a record
2 Setting up a repository in github
  - create a new repository, chooose a repository name, set repository visibility. add a repository describtion, initialize with a README, choose a license, add .gitignore file and setup repository setting.
3 Important of README file
  -README file is a crucial componenent in a GitHub repository, servimg as an introduction and guide for users, contributors and maintainers.
4 Compare, contrast, advantages and disadvantages between a private and a public repository on GitHub
  - Public Repository:
Advantages:
   *Open-source collaboration*: Anyone can view, fork, and contribute to the project.
   *Community engagement*: Encourages feedback, issues, and pull requests from a wider audience.
   *Transparency*: Code changes and discussions are publicly visible.
   *Discoverability*: Easily found through GitHub search and exploration.
Disadvantages:
   *Sensitive data exposure*: Risk of exposing sensitive information, such as API keys or credentials.
   *Unwanted contributions*: May receive unhelpful or spammy pull requests.
   *Lack of control*: Anyone can fork and modify the project, potentially creating competing versions.
Private Repository:
Advantages:
   *Controlled access*: Only invited collaborators can view and contribute to the project.
   *Sensitive data protection*: Reduces risk of exposing sensitive information.
   *Focused collaboration*: Collaborators can work together without distractions or unwanted contributions.
   *Intellectual property protection*: Helps protect proprietary code and ideas.
Disadvantages:
   *Limited collaboration*: Only invited collaborators can contribute, limiting community engagement.
   *Less discoverability*: Not easily found through GitHub search or exploration.
   *Additional overhead*: Requires managing access permissions and invitations.
5  What is commit and how to set it up in GitHub repository
   - A commit is a snapshot of changes made to your project's codebase. It's a way to save and track changes, creating a version history of your project.
   -Steps to make your first commit:
   *Create a new repository* on GitHub or clone an existing one to your local machine.
   *Make changes* to your project's code, such as adding a new file, editing existing code, or deleting files.
   *Stage changes* using `git add <file name>` or `git add .` to stage all changes.
   *Write a commit message* using `git commit -m "Your commit message"` to describe the changes made.
   *Create the commit* by pressing Enter or clicking the "Commit" button.
   -How commits help:
   *Track changes*: Commits create a record of changes, allowing you to see what was modified, added, or deleted.
   *Version history*: Commits create a timeline of changes, enabling you to revert to previous versions if needed.
   *Collaboration*: Commits help team members understand changes made by others, facilitating collaboration.
   *Backup*: Commits serve as a backup of your project's state at a particular point in time.
6 How branching work in GitHub and why it is important
   -Branching in Git allows developers to create separate lines of development in a repository, enabling multiple features or fixes to be worked on simultaneously without affecting the main 

   `git branch <branch-name>`: Create a new branch from the current commit.
   `git checkout <branch-name>`: Switch to the newly created branch.
   *Using a branch
   Make changes and commit them to the branch.
   Repeat this process until the feature or fix is complete.
   *Merging a branch:
   `git checkout main` (or the target branch): Switch to the branch you want to merge into.
   `git merge <branch-name>`: Merge the changes from the feature branch into the main branch.
    Resolve any conflicts that arise during the merge.
   `git commit` to finalize it.

